// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: scanners.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Scanners_ReportJobsStatus_FullMethodName = "/scanners.Scanners/ReportJobsStatus"
	Scanners_StopScan_FullMethodName         = "/scanners.Scanners/StopScan"
)

// ScannersClient is the client API for Scanners service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScannersClient interface {
	ReportJobsStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobReports, error)
	StopScan(ctx context.Context, in *StopScanRequest, opts ...grpc.CallOption) (*StopScanResult, error)
}

type scannersClient struct {
	cc grpc.ClientConnInterface
}

func NewScannersClient(cc grpc.ClientConnInterface) ScannersClient {
	return &scannersClient{cc}
}

func (c *scannersClient) ReportJobsStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobReports, error) {
	out := new(JobReports)
	err := c.cc.Invoke(ctx, Scanners_ReportJobsStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scannersClient) StopScan(ctx context.Context, in *StopScanRequest, opts ...grpc.CallOption) (*StopScanResult, error) {
	out := new(StopScanResult)
	err := c.cc.Invoke(ctx, Scanners_StopScan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScannersServer is the server API for Scanners service.
// All implementations must embed UnimplementedScannersServer
// for forward compatibility
type ScannersServer interface {
	ReportJobsStatus(context.Context, *Empty) (*JobReports, error)
	StopScan(context.Context, *StopScanRequest) (*StopScanResult, error)
	mustEmbedUnimplementedScannersServer()
}

// UnimplementedScannersServer must be embedded to have forward compatible implementations.
type UnimplementedScannersServer struct {
}

func (UnimplementedScannersServer) ReportJobsStatus(context.Context, *Empty) (*JobReports, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportJobsStatus not implemented")
}
func (UnimplementedScannersServer) StopScan(context.Context, *StopScanRequest) (*StopScanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopScan not implemented")
}
func (UnimplementedScannersServer) mustEmbedUnimplementedScannersServer() {}

// UnsafeScannersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannersServer will
// result in compilation errors.
type UnsafeScannersServer interface {
	mustEmbedUnimplementedScannersServer()
}

func RegisterScannersServer(s grpc.ServiceRegistrar, srv ScannersServer) {
	s.RegisterService(&Scanners_ServiceDesc, srv)
}

func _Scanners_ReportJobsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannersServer).ReportJobsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scanners_ReportJobsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannersServer).ReportJobsStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scanners_StopScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScannersServer).StopScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scanners_StopScan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScannersServer).StopScan(ctx, req.(*StopScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scanners_ServiceDesc is the grpc.ServiceDesc for Scanners service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scanners_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scanners.Scanners",
	HandlerType: (*ScannersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportJobsStatus",
			Handler:    _Scanners_ReportJobsStatus_Handler,
		},
		{
			MethodName: "StopScan",
			Handler:    _Scanners_StopScan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scanners.proto",
}
